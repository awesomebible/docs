<style>
    /* -------------------------------- 

File#: _1_color-swatches
Title: Color Swatches
Descr: A list of selectable swatches used to show a product color variants
Usage: codyhouse.co/license

-------------------------------- */
/* reset */
*, *::after, *::before {
  box-sizing: border-box;
}

* {
  font: inherit;
  margin: 0;
  padding: 0;
  border: 0;
}

body {
  background-color: hsl(0, 0%, 100%);
  font-family: system-ui, sans-serif;
  color: hsl(230, 7%, 23%);
  font-size: 1rem;
}

h1, h2, h3, h4 {
  line-height: 1.2;
  color: hsl(230, 13%, 9%);
  font-weight: 700;
}

h1 {
  font-size: 2.0736rem;
}

h2 {
  font-size: 1.728rem;
}

h3 {
  font-size: 1.25rem;
}

h4 {
  font-size: 1.2rem;
}

ol, ul, menu {
  list-style: none;
}

button, input, textarea, select {
  background-color: transparent;
  border-radius: 0;
  color: inherit;
  line-height: inherit;
  appearance: none;
}

textarea {
  resize: vertical;
  overflow: auto;
  vertical-align: top;
}

a {
  color: hsl(250, 84%, 54%);
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

img, video, svg {
  display: block;
  max-width: 100%;
}

@media (min-width: 64rem) {
  body {
    font-size: 1.25rem;
  }

  h1 {
    font-size: 3.051rem;
  }

    h2 {
    font-size: 2.44rem;
  }

    h3 {
    font-size: 1.75rem;
  }

    h4 {
    font-size: 1.5625rem;
  }
}

/* variables */
:root {
  /* colors */
  --cc9-color-primary-hsl: 250, 84%, 54%;
  --cc9-color-bg-hsl: 0, 0%, 100%;
  --cc9-color-contrast-high-hsl: 230, 7%, 23%;
  --cc9-color-contrast-higher-hsl: 230, 13%, 9%;
  --cc9-color-contrast-medium-hsl: 225, 4%, 47%;

  /* spacing */
  --cc9-space-2xs: 0.375rem;
  --cc9-space-xs: 0.5rem;

  /* typography */
  --cc9-text-sm: 0.833rem;
}

@media(min-width: 64rem){
  :root {
    /* spacing */
    --cc9-space-2xs: 0.5625rem;
    --cc9-space-xs: 0.75rem;

    /* typography */
    --cc9-text-sm: 1rem;
  }
}

/* component */
:root {
  --color-swatches-gap: var(--cc9-space-2xs);
  --color-swatch-size: 32px;
  --color-swatch-radius: 50%;
}

.color-swatches__list {
  display: grid;
  grid-gap: var(--color-swatches-gap);
  grid-template-columns: repeat(auto-fit, var(--color-swatch-size));
}

.color-swatches__swatch {
  position: relative;
  display: block;
  height: var(--color-swatch-size);
  width: var(--color-swatch-size);
  border-radius: var(--color-swatch-radius);
  cursor: pointer;
}
.color-swatches__swatch::before {
  content: "";
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform: translate(-50%, -50%);
          transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  border: 1px solid hsla(var(--cc9-color-contrast-higher-hsl), 0.1);
  border-radius: inherit;
  pointer-events: none;
  transition: 0.2s;
}
.color-swatches__swatch:hover::before {
  border-color: hsla(var(--cc9-color-contrast-higher-hsl), 0.3);
}

.color-swatches__item--selected .color-swatches__swatch::before {
  border-color: hsla(var(--cc9-color-contrast-higher-hsl), 0.8);
  width: calc(100% + 6px);
  height: calc(100% + 6px);
}

/* utility classes */
.cc9-sr-only {
  position: absolute;
  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(50%);
  width: 1px;
  height: 1px;
  overflow: hidden;
  padding: 0;
  border: 0;
  white-space: nowrap;
}

.cc9-color-contrast-high {
  --cc9-color-o: 1;
  color: hsla(var(--cc9-color-contrast-high-hsl), var(--cc9-color-o, 1));
}

.cc9-margin-bottom-xs {
  margin-bottom: var(--cc9-space-xs);
}

.cc9-color-contrast-medium {
  --cc9-color-o: 1;
  color: hsla(var(--cc9-color-contrast-medium-hsl), var(--cc9-color-o, 1));
}

.cc9-text-sm {
  font-size: var(--cc9-text-sm);
}

.cc9-hide {
  display: none !important;
}
</style>
<fieldset class="color-swatches  js-color-swatches">
    <legend class="color-swatches__legend text-sm lg:text-base text-gray-500 mb-2 lg:mb-3" aria-live="polite" aria-atomic="true">Color: <span class="color-swatches__color text-gray-700 js-color-swatches__color">Jet</span></legend>
  
    <select class="js-color-swatches__select" aria-label="Select a color">
      <option value="Jet" data-style="background-color: #34252F;">Jet</option>
      <option value="Arsenic" data-style="background-color: #3B5249;">Arsenic</option>
      <option value="Wintergreen" data-style="background-color: #519872;">Wintergreen</option>
      <option value="Laurel Green" data-style="background-color: #A4B494;">Laurel Green</option>
      
    </select>
  </fieldset>
<script lang="js">
    if(!Util) function Util () {};

Util.addClass = function(el, className) {
  var classList = className.split(' ');
  el.classList.add(classList[0]);
  if (classList.length > 1) Util.addClass(el, classList.slice(1).join(' '));
};

Util.removeClass = function(el, className) {
  var classList = className.split(' ');
  el.classList.remove(classList[0]);
  if (classList.length > 1) Util.removeClass(el, classList.slice(1).join(' '));
};

Util.setAttributes = function(el, attrs) {
  for(var key in attrs) {
    el.setAttribute(key, attrs[key]);
  }
};

// File#: _1_color-swatches
// Usage: codyhouse.co/license
(function() {
  var ColorSwatches = function(element) {
    this.element = element;
    this.select = false;
    initCustomSelect(this); // replace <select> with custom <ul> list
    this.list = this.element.getElementsByClassName('js-color-swatches__list')[0];
    this.swatches = this.list.getElementsByClassName('js-color-swatches__option');
    this.labels = this.list.getElementsByClassName('js-color-swatch__label');
    this.selectedLabel = this.element.getElementsByClassName('js-color-swatches__color');
    this.focusOutId = false;
    initColorSwatches(this);
  };

  function initCustomSelect(element) {
    var select = element.element.getElementsByClassName('js-color-swatches__select');
    if(select.length == 0) return;
    element.select = select[0];
    var customContent = '';
    for(var i = 0; i < element.select.options.length; i++) {
      var ariaChecked = i == element.select.selectedIndex ? 'true' : 'false',
        customClass = i == element.select.selectedIndex ? ' color-swatches__item--selected' : '',
        customAttributes = getSwatchCustomAttr(element.select.options[i]);
      customContent = customContent + '<li class="color-swatches__item js-color-swatches__item'+customClass+'" role="radio" aria-checked="'+ariaChecked+'" data-value="'+element.select.options[i].value+'"><span class="js-color-swatches__option js-tab-focus" tabindex="0"'+customAttributes+'><span class="sr-only js-color-swatch__label">'+element.select.options[i].text+'</span><span aria-hidden="true" style="'+element.select.options[i].getAttribute('data-style')+'" class="color-swatches__swatch"></span></span></li>';
    }

    var list = document.createElement("ul");
    Util.setAttributes(list, {'class': 'color-swatches__list js-color-swatches__list', 'role': 'radiogroup'});

    list.innerHTML = customContent;
    element.element.insertBefore(list, element.select);
    Util.addClass(element.select, 'hidden');
  };

  function initColorSwatches(element) {
    // detect focusin/focusout event - update selected color label
    element.list.addEventListener('focusin', function(event){
      if(element.focusOutId) clearTimeout(element.focusOutId);
      updateSelectedLabel(element, document.activeElement);
    });
    element.list.addEventListener('focusout', function(event){
      element.focusOutId = setTimeout(function(){
        resetSelectedLabel(element);
      }, 200);
    });

    // mouse move events
    for(var i = 0; i < element.swatches.length; i++) {
      handleHoverEvents(element, i);
    }

    // --select variation only
    if(element.select) {
      // click event - select new option
      element.list.addEventListener('click', function(event){
        // update selected option
        resetSelectedOption(element, event.target);
      });

      // space key - select new option
      element.list.addEventListener('keydown', function(event){
        if( (event.keyCode && event.keyCode == 32 || event.key && event.key == ' ') || (event.keyCode && event.keyCode == 13 || event.key && event.key.toLowerCase() == 'enter')) {
          // update selected option
          resetSelectedOption(element, event.target);
        }
      });
    }
  };

  function handleHoverEvents(element, index) {
    element.swatches[index].addEventListener('mouseenter', function(event){
      updateSelectedLabel(element, element.swatches[index]);
    });
    element.swatches[index].addEventListener('mouseleave', function(event){
      resetSelectedLabel(element);
    });
  };

  function resetSelectedOption(element, target) { // for --select variation only - new option selected
    var option = target.closest('.js-color-swatches__item');
    if(!option) return;
    var selectedSwatch =  element.list.querySelector('.color-swatches__item--selected');
    if(selectedSwatch) {
      Util.removeClass(selectedSwatch, 'color-swatches__item--selected');
      selectedSwatch.setAttribute('aria-checked', 'false');
    }
    Util.addClass(option, 'color-swatches__item--selected');
    option.setAttribute('aria-checked', 'true');
    // update select element
    updateNativeSelect(element.select, option.getAttribute('data-value'));
  };

  function resetSelectedLabel(element) {
    var selectedSwatch =  element.list.getElementsByClassName('color-swatches__item--selected');
    if(selectedSwatch.length > 0 ) updateSelectedLabel(element, selectedSwatch[0]);
  };

  function updateSelectedLabel(element, swatch) {
    var newLabel = swatch.getElementsByClassName('js-color-swatch__label');
    if(newLabel.length == 0 ) return;
    element.selectedLabel[0].textContent = newLabel[0].textContent;
  };

  function updateNativeSelect(select, value) {
		for (var i = 0; i < select.options.length; i++) {
			if (select.options[i].value == value) {
				select.selectedIndex = i; // set new value
				select.dispatchEvent(new CustomEvent('change')); // trigger change event
				break;
			}
		}
  };
  
  function getSwatchCustomAttr(swatch) {
    var customAttrArray = swatch.getAttribute('data-custom-attr');
    if(!customAttrArray) return '';
    var customAttr = ' ',
      list = customAttrArray.split(',');
    for(var i = 0; i < list.length; i++) {
      var attr = list[i].split(':')
      customAttr = customAttr + attr[0].trim()+'="'+attr[1].trim()+'" ';
    }
    return customAttr;
  };

  //initialize the ColorSwatches objects
	var swatches = document.getElementsByClassName('js-color-swatches');
	if( swatches.length > 0 ) {
    for( var i = 0; i < swatches.length; i++) {
      new ColorSwatches(swatches[i]);
    }
  }
}());
</script>